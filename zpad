Hey Terry, great question! In Go (often referred to as Golang), not all projects are considered modules. Modules are a specific way of organizing and managing dependencies in Go projects, and they were introduced officially in Go 1.11. Here's a bit more detail:

1. **Non-Module Projects:** In older Go projects or in projects that haven't adopted modules yet, dependencies are managed differently. You might have seen the `GOPATH` environment variable used to specify a workspace for your Go code. In these projects, dependencies are typically placed in specific directories inside the workspace.

2. **Module Projects:** A Go module, on the other hand, is essentially a project-level dependency management solution. When you initiate a Go module in your project (typically using `go mod init`), you're telling Go to manage your project's dependencies in a specific way. The dependencies are then listed in a `go.mod` file, and you can use `go get` to add or update dependencies.

So, not all Go projects are modules, but it's becoming the standard way to manage dependencies, especially for newer projects. Modules provide better version control and dependency isolation, which can help ensure your project's stability and reproducibility.

If you're starting a new project or revisiting an old one, I'd recommend considering using Go modules, especially if you're working on something that you plan to share or collaborate on. It's a step forward in Go's dependency management practices.

=======================

I want to create a walkthrough using golang for undgraduate computer science students. 
The walkthrough would allow me to incrementally add functionality to our GO module by
adding packages to this module, where each package controls a specific piece of the overall
functionality of the project.

The projects theme would be "getting data from the web" and use existing GO libraries or
free web services to download said data. Some example of data would be weather data, sports
data, or basically any simple data that can be accessed via different types of requests. 

I want to make each package as object oriented as possible, and realizing that GOLang is not
inherently object oriented, I would like to use the most common techniques for code organization,
data encapsulation, abstraction and inheritance. 

I must emphasize that this project is not about doing things the most efficient, like using concurrency,
it is mostly about organizing a multipackaged Go module using the best techniques to help
with OOP concepts. 

Ultimately I would like to see a web interface and api written in go that could interact with all
the data gathering packages we create. 

